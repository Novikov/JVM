package concurrency

/**
 * Кратко повторить инфу можно тут https://habr.com/ru/articles/693244/#Основные%20понятия
 *
 * Многопоточность - способность процессора обеспечивать одновременное выполнение нескольких потоков внутри одного процесса
 *
 * Процесс - экземпляр программы во время выполнения
 * Поток выполнения - определенный способ выполнения процесса. Набор инструкций которые выполняются последовательно.
 * Ресурсы процесса котторыми пользуются разные потоки:
 * -PID
 * -Address Space
 * -Memory
 *
 * Thread - это последовательность операций процессом выполнения которых на процессоре управляет операционная система
 * У любого процесса есть главный поток и дополнительные.
 * Каждый поток может лечь на отдельное ядро.
 *
 * Hyper threading - возможность использовать простаивающие ресурсы ядра, которые выполняют какую то операцию, но всеровно имеющие простаивающие ресурсы
 * Именно это Intel использует при создании 2х логических ядер на одном физическом ядре.
 *
 * Многопоточное выполнение
 * Есть одно ядро и 2 потока. Ядро переключается между потоками и выполняет инструкции из каждого потока.
 * Выполнение может быть сихронное или асинхронное. На что делать когда мы хотим запустить 1000 потоков на 1 ядре?
 *
 * Асинхронность (Кооперативная многозадачность)
 * Может работать в рамках 1 процесса и 1 потока
 * При выполнении сетевого запроса поток большую часть времени простаивает (ожидание)
 * Асинхронность позволяет выполнять какие либо инструкции во время ожидания
 * Все это работает на event-loop механизме, когда какие то задачи завершаются - вызывается callback
 *
 * В RxJava работа в паре с Retrofit будет асинхронной, а использование блокирующего HttpUrlConnection будет синхронным
 *
 * Число возможных переключений ядер между потоками измеряется гигагерцами. Уперлись в определенное число гигагерц
 * и начали делать многоядерные процессоры.
 *
 * Многоядерные процессоры способны работать одновременно
 *
 * Нам нужно добиться 60fps, а это 1 кадр на 16мс,
 *
 * Race condition - Ситуация когда 2 потока работают с 1 или несколькими несинхронизированными ресурсами и в результате мы получаем неожиданный результат
 *
 * е
 *
 *
 * dead lock
 * race condition
 * test volatile
 *
 * Dispatchers.Main()
 * Dispatchers.MainImmediate
 *
 * Future/Callable
 *
 * */