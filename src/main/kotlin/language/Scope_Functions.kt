package language

fun main() {

    val list = mutableListOf(1, 2, 3, 4, 5)

    /** Принимает lambda with receiver и взаращает context object, обращение к элементам по this
     * Используйте apply, когда:
     * Вам нужно инициализировать объект и настроить его свойства.
     * Вы хотите сохранить ссылку на созданный объект после настройки.
     * */
    val applyResult = list.apply {
        add(6)
    }

    /** Принимает lambda взаращает context object, обращение к элементам по it
     * Используйте also, когда:
     * Вам нужно выполнить дополнительные действия с объектом (например, логирование) и вернуть его.
     * Вы хотите сохранить контекст объекта, но не изменять его свойства.*/
    val alsoResult = list.also {
        it.add(7)
    }

    /** Принимает lambda, а возвращает последнюю строку из lambda. Обращение к объекту по it
     * Используйте let, когда:
     * Вам нужно работать с объектом, который может быть null, и вы хотите избежать проверки на null.
     * Вы хотите выполнить какую-то операцию и вернуть значение (например, длину строки, обработанную дату и т. д.).
     * */
    val letResult = list.let {
        it.add(8)
        "result"
    }

    /** Принимает lambda with receiver, а возвращает последнюю строку из lambda
     * Используйте run, когда:
     * Вам нужно выполнить несколько операций с объектом и вернуть результат последней операции.
     * Вы хотите работать с объектом и не хотите явно указывать его имя в каждой строке (вы можете использовать this).
     * */
    val runResult = list.run {
        add(8)
        "result"
    }

    /** Принимает receiver и lambda with receiver, а возвращает последнюю строку из lambda
     * Используйте with, когда:
     * Вам нужно работать с объектом, но вы не хотите его изменять.
     * Вы хотите сделать код более читаемым, сгруппировав несколько операций с объектом.
     * */
    val withResult = with(list) {
        add(8)
        "result"
    }
}



