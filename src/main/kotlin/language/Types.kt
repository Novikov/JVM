package language

fun main() {
    nothingExample()
    anyExample()
    unitExample()
}


/**
 * Nothing это класс экземпляр которого создать нельзя
 *
 * Бесконечный цикл, throw Exception и так же в ветке else у when выражения возвращается exception для лушчей читаемости функции
 * Хотя when всеровно будет возвращать тип внутри своих ветвлений.
 * */
fun nothingExample() {
    //Нельзя создать эксезмляр
    //val nothing : Nothing = Nothing()

    //Но можно использовать в качестве типа
    val nothingList = listOf<Nothing>()

    val test: Any = 5

    //!!!Наследник всех других классов и это сделано для того чтобы можно было писать ветвления как в примере ниже. Тип будет Int т.к Nothing его наследник
    val result: Int = if(test is Int){
        throw IllegalArgumentException()
    }else {
        5
    }
}

/**
 * Аналог Object и после декомпиляции будет Object
 *
 * Базовый класс: Any является суперклассом для всех классов в Kotlin, включая встроенные типы, такие как Int, String, List и т.д.
 * Неявное наследование: Все классы неявно наследуют от Any, поэтому все объекты в Kotlin могут быть приведены к этому типу.
 *
 * Отличия от Object
    1. Упрощение API
    Kotlin разработан с акцентом на лаконичность и удобочитаемость. Уменьшение количества методов в базовом классе помогает сделать API более простым и понятным.

    2. Переосмысленный подход к null
    В Kotlin нулевая безопасность реализована по-другому, чем в Java.
    В Java методы класса Object могут принимать null значения, что требует дополнительной обработки.
    В Kotlin Any не позволяет null (без явного указания Any?), что снижает необходимость в дополнительных методах
    для обработки null-значений.

    3. В Java класс Object имеет методы, которые не всегда актуальны для всех классов, например,
    методы для управления синхронизацией. В Kotlin акцент сделан на то, чтобы предоставлять лишь те методы,
    которые действительно полезны и часто используемы.
 * */
fun anyExample() {
    val any = Any()
}

/**
 * Не класс а Object
 *
 *  1)Эквивалент void в Java: Unit является эквивалентом типа void в Java,
 *  но с некоторыми отличиями. В Kotlin функции, которые не возвращают значения,
 *  имеют тип Unit, что позволяет более чётко выразить намерения разработчика.
 *
 *  2)Необязательность явного указания: Поскольку Unit является "неявным" типом, в большинстве случаев разработчики не указывают его явно. Однако важно понимать, что при этом функция всё равно имеет тип Unit.
 *  3)Функции высшего порядка: Unit часто используется в функциональном программировании, особенно в функциях высшего порядка, где может быть важно указать, что функция не возвращает значимого значения, но выполняет побочные эффекты.
 *  4)Использование в callback-функциях: В Kotlin вы можете передавать функции, возвращающие Unit, в качестве обработчиков событий или обратных вызовов, что делает код более выразительным.\
 *
 *  Отличие от Any: В отличие от Any, который может быть использован для обозначения любого значения, Unit указывает на отсутствие значимого возвращаемого значения. Это повышает читаемость и ясность кода.
 *
 * */
fun unitExample(){
    val unit = Unit
}