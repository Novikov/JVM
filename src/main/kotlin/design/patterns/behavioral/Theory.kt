package design.patterns.behavioral

/**
 * Поведенческие шаблоны (Behavioral Patterns)
 * Поведенческие шаблоны проектирования решают задачи, связанные с взаимодействием между объектами и распределением
 * ответственности между ними. Они помогают упростить коммуникацию между объектами и управление их поведением в процессе работы системы.
 *
 * Основные поведенческие шаблоны:
 * Chain of Responsibility (Цепочка обязанностей) — позволяет передавать запросы по цепочке обработчиков, пока они не будут обработаны.
 * Command (Команда) — инкапсулирует запрос как объект, позволяя параметризовать клиентов с различными запросами, очередями и журналами запросов.
 * Interpreter (Интерпретатор) — предоставляет механизм для интерпретации выражений, обычно используется для создания интерпретаторов для маленьких языков программирования.
 * Iterator (Итератор) — предоставляет способ последовательного доступа ко всем элементам коллекции, не раскрывая её внутренней структуры.
 * Mediator (Посредник) — определяет объект, который инкапсулирует взаимодействие множества объектов, делая их независимыми друг от друга.
 * Memento (Хранитель) — позволяет сохранять и восстанавливать состояние объекта без нарушения инкапсуляции.
 * Observer (Наблюдатель) — позволяет объекту оповещать другие объекты об изменениях своего состояния.
 * State (Состояние) — позволяет объекту изменять своё поведение в зависимости от его состояния.
 * Strategy (Стратегия) — позволяет инкапсулировать различные алгоритмы и выбирать нужный алгоритм во время выполнения.
 * Template Method (Шаблонный метод) — позволяет определить скелет алгоритма в методе, оставляя детали реализации на усмотрение подклассов.
 * Visitor (Посетитель) — позволяет добавлять новые операции к объектам, не изменяя их классы.
 * */