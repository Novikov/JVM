package design.patterns.behavioral.mediator

/**
 * Шаблон Mediator используется для уменьшения зависимости между объектами, которые общаются между собой.
 * Вместо того чтобы объекты напрямую взаимодействовали друг с другом,
 * они отправляют сообщения медиатору, который управляет взаимодействием.
 *
 * Шаблон Mediator используется для уменьшения зависимости между объектами, которые общаются между собой. Вместо того чтобы объекты напрямую взаимодействовали друг с другом, они отправляют сообщения медиатору, который управляет взаимодействием.
 *
 * В Kotlin можно реализовать этот паттерн с использованием интерфейсов и классов, чтобы обеспечить централизованное управление взаимодействиями между объектами.
 *
 * Пример реализации паттерна Mediator:
 * Предположим, у нас есть чат, где участники могут отправлять сообщения через медиатор. Каждый участник (или Colleague) может отправить сообщение, а медиатор (или ChatRoom) будет передавать это сообщение другим участникам.
 *
 * Шаги:
 * Mediator (Медиатор) — это объект, который управляет взаимодействием между коллегами.
 * Colleague (Коллега) — это абстрактные участники, которые отправляют сообщения медиатору, а медиатор передает эти сообщения другим коллегам.
 * */
fun main(){
    // Создаем медиатор
    val chatRoom = ChatRoom()

    // Создаем несколько пользователей (коллег)
    val user1 = User("Алексей", chatRoom)
    val user2 = User("Марина", chatRoom)
    val user3 = User("Иван", chatRoom)

    // Добавляем коллег в медиатор
    chatRoom.addColleague(user1)
    chatRoom.addColleague(user2)
    chatRoom.addColleague(user3)

    // Пользователи отправляют сообщения через медиатор
    user1.send("Привет, ребята!")
    user2.send("Привет, Алексей!")
    user3.send("Как дела?")
}