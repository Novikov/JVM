package design.patterns.strctural.decorator

/**
 * Матрешка!
 *
 * Динамическое добавление новых обязанностей объекту
 * Используется в качестве альтернативы порождению подклассов для расширения функциональности
 *
 * Примеры использования
 * -Динамическое и понятное клиентам добавление обязанностей объектам.
 * -Реализация обязанностей, которые могут быть сняты с объекта.
 * -Расширении класса путем порождения подклассов невозможно по каким либо причинам.
 *
 * !!! Нормального примера в Android Framework не нашел
 * */

fun main(){
    val developer = TeammateKotlinDeveloper(SeniorKotlinDeveloper(KotlinDeveloper()))
    println(developer.makeJob())
}